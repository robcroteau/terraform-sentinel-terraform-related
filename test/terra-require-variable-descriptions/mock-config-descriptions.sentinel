import "strings"
import "types"

_modules = {
	"root": {
		"data":      {},
		"modules":   {},
		"outputs":   {},
		"providers": {},
		"resources": {
			"google_compute_disk": {
				"default": {
					"config": {
						"image": "debian-8-jessie-v20170523",
						"name":  "${var.id_string}",
						"physical_block_size_bytes": 4096,
						"type": "pd-ssd",
						"zone": "us-central1-a",
					},
					"provisioners": null,
				},
			},
			"google_compute_network": {
				"vpc_network": {
					"config": {
						"name": "vpc-network",
					},
					"provisioners": null,
				},
			},
			"google_project": {
				"my": {
					"config": {
						"name":       "Project with labels",
						"project_id": "${var.project_name}",
					},
					"provisioners": null,
				},
			},
			"google_pubsub_topic": {
				"example": {
					"config": {
						"name": "example-topic",
					},
					"provisioners": null,
				},
			},
		},
		"variables": {
			"id_string": {
				"default":     "idstring",
				"description": "This also has a description",
			},
			"project_name": {
				"default":     "temp-project",
				"description": "Project has a description",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs